import React, { useState, useEffect } from "react";
import Link from "next/link";
import Button from "./Button";
import { useRouter } from "next/router";
import { useFormik } from "formik";
import { countries } from "../../../src/exApi/countriesStatesCities.json";
import Loader from "../Loader";
import * as Yup from "yup";

function ChangeLocationModal(props) {
  const [selectedCountry, setSelectedCountry] = useState(null);
  const [loader, setLoader] = useState(false);
  const [location, setLocation] = useState(null);

  // Get location from url
  useEffect(() => {
    fetch(
      "https://geolocation-db.com/json/d802faa0-10bd-11ec-b2fe-47a0872c6708"
    )
      .then((resp) => resp.json())
      .catch(() => {
        return {
          country: "ng",
        };
      })
      .then((resp) => {
        setLocation(resp);
        setSelectedCountry(resp.country_name);
        formik.setFieldValue("country", resp.country_name);
      });
  }, []);

  //log(location && location, "location");

  // Initialize router
  const router = useRouter();

  // Set loader false
  loader &&
    setTimeout(() => {
      setLoader(false);
      props.onCallChangeLocationModal();
    }, 3000);

  // INITIAL FORM VALUES
  let initialValues = {
    country: "",
    state: "",
  };

  // FORMIK ONSUBMIT

  // Yup validation
  const validationSchema = Yup.object({
    country: Yup.string().required("This field is required"),
  });

  // USING FORMIK PACKAGE FOR FORM HANDLING
  const formik = useFormik({
    initialValues,
    validationSchema,
  });

  // log
  //log("formik: ", formik);

  return (
    <section
      className={`w-full h-screen bg-[#00000065] fixed inset-0 z-30 flex items-center  justify-center ${
        props.display ? "flex" : "hidden"
      } `}
      onClick={props.onCallChangeLocationModal}
    >
      <form
        onSubmit={(e) => {
          e.preventDefault();
          formik.handleSubmit(e);
        }}
      >
        <div
          className="h-[70vh] w-[70%] mx-auto overflow-scroll border rounded-2xl bg-white px-6 py-6 "
          onClick={(e) => e.stopPropagation()}
        >
          <article className="w-full flex justify-center mb-4">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6 mr-1"
              fill="none"
              viewBox="0 0 24 24"
              stroke="#F44336"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
              />
            </svg>
            <h2 className="font-bold ">Change my location</h2>
          </article>

          <article className="py-3">
            <h2 className="font-bold text-[#5f9af2]">Countries</h2>
          </article>
          <article className="py-3">
             {countries.map((country) => {
              return (
            <h2 key={country.name} className="font-bold text-[#5f9af2]">
              <Link href={`/schools/location/${country.name}`} passHref>
                <a
                  className="text-[#8ea2ba] group-hover:text-[#5f9af2]"
                >
                  {country.name}
                </a>
              </Link>
            </h2>)
             })}
          </article>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3 w-full sm:mr-5 sm:mb-0">
            {countries.map((country) => {
              return (
                <a
                  className="group flex justify-between items-center text-[#0c121a] h-fit mb-3 p-3  border hover:border-[#5f9af2] cursor-pointer rounded-md break-words"
                  key={country.name}
                >
                  <Link href={`/schools/location/${country.name}`} passHref>
                    <a
                      className="text-[#8ea2ba] group-hover:text-[#5f9af2]"
                      key={country.name}
                    >
                      {country.name}
                    </a>
                  </Link>
                  <p className="text-[20px] hover:bg-[#7271718c] hover:font-bold">
                    &gt;
                  </p>
                </a>
              );
            })}
          </div>
          {/* {formik.isValid ? (
            formik.values.state === "" ? (
              <Link
                href="/schools/location/[country]"
                as={`/schools/location/${formik.values.country}`}
                passHref
              >
                <a
                  className="w-full flex items-center justify-center"
                  onClick={() =>
                    formik.values.country !== "" &&
                    formik.isValid &&
                    selectedCountry &&
                    setLoader(true)
                  }
                >
                  <Button
                    borderRaduis="rounded-full"
                    px="px-5 w-full sm:w-[200px]"
                    py="py-3"
                    bg={`${
                      formik.isValid && selectedCountry
                        ? "bg-[#5f9af2] text-[#E7F0FB]"
                        : "cursor-not-allowed bg-[#293b57] text-[#476697]"
                    }`}
                  >
                    {" "}
                    Proceed
                  </Button>
                </a>
              </Link>
            ) : (
              <Link
                href="/schools/location/[country]/[state]"
                as={`/schools/location/${formik.values.country}/${formik.values.state}`}
                passHref
              >
                <a
                  className="w-full flex items-center justify-center"
                  onClick={() =>
                    formik.values.country !== "" &&
                    formik.isValid &&
                    selectedCountry &&
                    setLoader(true)
                  }
                >
                  <Button
                    borderRaduis="rounded-full"
                    px="px-5 w-full sm:w-[200px]"
                    py="py-3"
                    bg={`${
                      formik.isValid && selectedCountry
                        ? "bg-[#5f9af2] text-[#E7F0FB]"
                        : "cursor-not-allowed bg-[#293b57] text-[#476697]"
                    }`}
                  >
                    {" "}
                    Proceed
                  </Button>
                </a>
              </Link>
            )
          ) : (
            <a
              className="w-full flex items-center justify-center"
              onClick={() =>
                formik.values.country !== "" &&
                formik.isValid &&
                selectedCountry &&
                setLoader(true)
              }
            >
              <Button
                borderRaduis="rounded-full"
                px="px-5 w-full sm:w-[200px]"
                py="py-3"
                bg={`${
                  formik.isValid && selectedCountry
                    ? "bg-[#5f9af2] text-[#E7F0FB]"
                    : "cursor-not-allowed bg-[#293b57] text-[#476697]"
                }`}
              >
                {" "}
                Proceed
              </Button>
            </a>
          )} */}
        </div>
      </form>
      <Loader
        display={loader}
        message={"Fetching Schools from your location"}
      />
    </section>
  );
}

export default ChangeLocationModal;
